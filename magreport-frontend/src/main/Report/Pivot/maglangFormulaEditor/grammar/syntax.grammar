@precedence{
  prefix,
  logicBooleanLiteral,
  expressionBooleanLiteral,
  pow @right,
  times @left,
  plus @left,
  logicAnd @left,
  logicOr @left,
  logicXor @left
}
@top Formula { expression }

@skip { space | LineComment }

expression {
  String |
  Number |
  !expressionBooleanLiteral BooleanLiteral |
  parenthesizedExpression |
  binaryExpression |
  unaryExpression |
  originalFieldNameExpression |
  derivedFieldNameExpression |
  FunctionCallExpression |
  IfExpression
}

originalFieldNameExpression {"[" OriginalFieldName "]"}
OriginalFieldName {fieldName}

derivedFieldNameExpression {"[[" DerivedFieldName "]]"}
DerivedFieldName{fieldName}

parenthesizedExpression { "(" expression ")" }

binaryExpression {
  Product {expression !times "*" expression} |
  Fraction {expression !times "/" expression} |
  IntegerDivision {expression !times "//" expression} |
  Modulo {expression !times "%" expression} |
  Sum {expression !plus "+" expression} |
  Subtraction {expression !plus "-" expression}
}

unaryExpression {
  UnaryMinus {!prefix "-" expression}
}

FunctionCallExpression {
  FunctionName "(" commaSep<expression>  ")"
}

FunctionName {identifier}

// If expression

IfExpression {
  IfKeyword "(" booleanExpression ")" "{" expression "}" (ElifExpression)* ElseExpression
}

ElseExpression{
  ElseKeyword "{" expression "}"
}

ElifExpression {
  ElifKeyword "(" booleanExpression ")" "{" expression "}"
}

booleanExpression {
  !logicBooleanLiteral BooleanLiteral |
  CompareExpression {expression CompareOp expression} |
  LogicAnd {booleanExpression !logicAnd AndKeyword booleanExpression} |
  LogicOr {booleanExpression !logicOr OrKeyword booleanExpression} |
  LogicXor {booleanExpression !logicXor XorKeyword booleanExpression} |
  LogicNot {NotKeyword "(" booleanExpression ")"} |
  parenthesizedBooleanExpression
}

parenthesizedBooleanExpression {
  "(" booleanExpression ")"
}

CompareOp {
  "=" | "!=" | "<>" | "<" | ">" | "<=" | ">="
}

// Tokens

@tokens {

  identifierChar { @asciiLetter | "_"}
  identifier {identifierChar (identifierChar | @digit)*}

  fieldName {![ \t\r#;\[\]\n]+![#;\[\]\n\r\t]*}

  String { '"' (!["\\] | "\\" _)* '"' }

  Number {
    (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*)
      (("e" | "E") ("+" | "-")? ("_" | @digit)+)?
  }

  LineComment { "#" ![\n]* }

  space { $[ \t\n\r]+ }

}

// Keywords

BooleanLiteral { @specialize<identifier, "True" | "False"> }

IfKeyword {@specialize<identifier, "if">}

ElifKeyword {@specialize<identifier, "elif">}

ElseKeyword {@specialize<identifier, "else">}

OrKeyword {@specialize<identifier, "or">}

AndKeyword {@specialize<identifier, "and">}

NotKeyword {@specialize<identifier, "not">}

XorKeyword {@specialize<identifier, "xor">}

 
// Function arguments

commaSep<content> {
  "" | content ("," content?)*
}

@detectDelim
