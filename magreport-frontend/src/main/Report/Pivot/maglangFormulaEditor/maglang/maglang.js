import { LRParser } from '@lezer/lr';
import { LRLanguage, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,True:80, False:80, if:120, and:138, or:140, xor:142, not:144, elif:152, else:154};
const parser = LRParser.deserialize({
  version: 14,
  states: ",rOYQPOOOOQO'#Ca'#CaOYQPO'#DVQwQPOOOOQO'#DY'#DYOYQPO'#ChO!]QQO'#DaO!bQQO'#DeOOQO'#Cl'#ClO!gQPO'#CkOOQO'#Cn'#CnO!lQPO'#CmOOQO'#DS'#DSO!qQPO,59qOYQPO,58|OYQPO,58}OYQPO,59OOYQPO,59POYQPO,59QOYQPO,59ROOQO,59S,59SOOQO'#Ci'#CiO!xQPO,59{OOQO'#Cj'#CjO!}QQO,5:PO#SQPO,59VO#ZQPO,59XOOQO1G/]1G/]OOQO1G.h1G.hOOQO1G.i1G.iOOQO1G.j1G.jOOQO1G.k1G.kO#{QPO1G.lO%]QPO1G.mOOQO1G/g1G/gOOQO1G/k1G/kO&mQPO'#DhO&wQPO1G.qO#ZQPO'#DVO&|QPO'#CoO'gQPO1G.sOOQO'#Cx'#CxO'uQPO'#CwO'zQPO'#DkOOQO'#Dk'#DkO)RQPO'#C}O)]QPO,5:SOOQO7+$]7+$]O)eQPO,59qO*RQPO,5:cOOQO'#Cp'#CpOYQPO,59ZOOQO'#Cr'#CrO#ZQPO,59]OOQO'#Ct'#CtO#ZQPO,59_OOQO'#Cv'#CvO#ZQPO,59aO*aQPO7+$_O#ZQPO,59cO*fQPO,59iOOQO-E6{-E6{OOQO1G/}1G/}O*pQPO1G.uOOQO1G.w1G.wO+QQPO1G.yO+`QPO1G.{OYQPO<<GyO+nQPO1G.}O+|QPOAN=eOOQO7+$i7+$iO,TQPOG23POOQO'#Cz'#CzO,]QPO'#CyOOQO'#DO'#DOO,TQPOLD(kOOQO'#C|'#C|O,bQPO'#C{OOQOLD(kLD(kO#ZQPO,59eOOQO-E6|-E6|OOQO!$'LV!$'LVOYQPO,59gO,gQPO1G/PO,uQPO1G/RO,|QPO7+$kOOQO7+$m7+$mOYQPO<<HVO-RQPOAN=qOOQOG23]G23]",
  stateData: "-Y~OuOSPOS~OR[OS[OwWOxPOzQO!STO!UUO!YVO!^YO~O}^O!O_O!P`O!QaO!RbO!ScO~O!VeO~O!VgO~OziO~OzjO~O{kO~PwO!WrO~O!ZsO~O{![P~PYOR[OS[OwWOxPOzvO!STO!UUO!YVO!^YO!jyO~O}^O!O_O!P`O!QaOsYi!RYi!SYi{Yi!]Yi!`Yi!aYi!bYi!cYi!dYi!eYi!fYi!gYi!hYi!iYi!mYi~O}^O!O_O!P`O!QaOsZi!RZi!SZi{Zi!]Zi!`Zi!aZi!bZi!cZi!dZi!eZi!fZi!gZi!hZi!iZi!mZi~O!]}O{![X~PwO{!PO~O!`!SO!a!SO!b!SO!c!SO!d!SO!e!SO!f!SO~PwO{![O!g!UO!h!WO!i!YO~Oz!]O~O{!_X}vX!OvX!PvX!QvX!RvX!SvX!`vX!avX!bvX!cvX!dvX!evX!fvX!g!_X!h!_X!i!_X~O{qX!]qX~PYO!]}O{![a~O{kO!`!SO!a!SO!b!SO!c!SO!d!SO!e!SO!f!SO~PwO{!`O!g!UO!h!WO!i!YO~O!l!eO~O{qa!]qa~PwO{ci!gci!hci!ici~PwO!g!UO{gi!hgi!igi~O!g!UO!h!WO{ii!iii~O{!hO!g!UO!h!WO!i!YO~O!m!iO~PwO!n!jO!o!nO~Oz!qO~O!l!tO~O{!wO!g!UO!h!WO!i!YO~O!m!xO~PwO!l!yO~O!m!{O~PwO",
  goto: "(r!lPPPPP!m#X#X#X#X#X#X#q$Z$^#q$a#q$y%c%l%c%p%c%x%c&P%c&V&`&d&h&n&r&xPPP'OPP#qPP#qPPPPPP#qPPP#qPP(YPP(]PPPPPPPPPPP%cn[OQT^_`abci}!T!e!t!y_{jv!V!X!Z!]!q}SOQT^_`abcijv}!T!V!X!Z!]!e!q!t!y}[OQT^_`abcijv}!T!V!X!Z!]!e!q!t!yRfURhV}XOQT^_`abcijv}!T!V!X!Z!]!e!q!t!y}ZOQT^_`abcijv}!T!V!X!Z!]!e!q!t!y_|jv!V!X!Z!]!qT!Tw!Q]!Vx!R!c!d!f!uZ!Xx!R!d!f!uX!Zx!R!f!u_zjv!V!X!Z!]!qT!l!i!mT!k!i!mQ!p!iR!s!mT!o!i!mQ!OtR!_!OQ!m!iR!r!mQROQ]QQdTQl^Qm_Qn`QoaQpbQqcQti[wj!V!X!Z!]!qQ!QvQ!^}Q!a!TQ!g!eQ!v!tR!z!yRuiQxjQ!RvQ!b!VQ!c!XQ!d!ZQ!f!]R!u!q",
  nodeNames: "âš  LineComment Formula String Number BooleanLiteral Product Fraction IntegerDivision Modulo Sum Subtraction UnaryMinus OriginalFieldName DerivedFieldName FunctionCallExpression FunctionName IfExpression IfKeyword CompareExpression CompareOp LogicAnd AndKeyword LogicOr OrKeyword LogicXor XorKeyword LogicNot NotKeyword ElifExpression ElifKeyword ElseExpression ElseKeyword",
  maxTerm: 77,
  skippedNodes: [0,1],
  repeatNodeCount: 2,
  tokenData: "J^~RyOX#rXY%hYZ%hZ]#r]^%h^p#rpq%hqr%yrs'qst1Ztu#ruv1rvx#rxy2lyz3fz{4`{|5Y|}6S}!O6|!O!P7v!P!Q=r!Q![?l![!]#r!^!_AU!_!`C{!`!aDu!a!c#r!c!}Fo!}#OHO#O#P#r#P#QH]#Q#R#r#R#SFo#S#T#r#T#oFo#o#pHj#p#q#r#q#rId#r;'S#r;'S;=`%b<%lO#rQ#wZ!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rQ$oX!VQOX$jZ]$j^s$jt!]$j!^!}$j#O#P$j#Q;'S$j;'S;=`%[<%lO$jQ%_P;=`<%l$jQ%eP;=`<%l#r~%mSu~XY%hYZ%h]^%hpq%hR&O]!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!_#r!_!`&w!`!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR'OZ!aP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR'vb!VQOX'qXZ)OZ]'q]^)O^p'qpq*lqr'qrs.ast)Ot!]'q!]!^)O!^!}'q!}#O)O#O#P/Z#P#Q)O#Q;'S'q;'S;=`1T<%lO'qP)RVOr)Ors)hs#O)O#O#P)m#P;'S)O;'S;=`*f<%lO)OP)mORPP)pRO;'S)O;'S;=`)y;=`O)OP)|WOr)Ors)hs#O)O#O#P)m#P;'S)O;'S;=`*f;=`<%l)O<%lO)OP*iP;=`<%l)OR*q`!VQOX*lXZ)OZ]*l]^)O^r*lrs+sst)Ot!]*l!]!^)O!^!}*l!}#O)O#O#P,g#P#Q)O#Q;'S*l;'S;=`.Z<%lO*lR+zXRP!VQOX$jZ]$j^s$jt!]$j!^!}$j#O#P$j#Q;'S$j;'S;=`%[<%lO$jR,l`!VQOX*lXZ)OZ]*l]^)O^s*lst)Ot!]*l!]!^)O!^!}*l!}#O)O#O#P*l#P#Q)O#Q;'S*l;'S;=`-n;=`<%l)O<%lO*lR-qWOr)Ors)hs#O)O#O#P)m#P;'S)O;'S;=`*f;=`<%l*l<%lO)OR.^P;=`<%l*lR.hZRP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR/`b!VQOX'qXZ)OZ]'q]^)O^p'qpq*lqs'qst)Ot!]'q!]!^)O!^!}'q!}#O)O#O#P'q#P#Q)O#Q;'S'q;'S;=`0h;=`<%l)O<%lO'qR0kWOr)Ors)hs#O)O#O#P)m#P;'S)O;'S;=`*f;=`<%l'q<%lO)OR1WP;=`<%l'q~1`SP~OY1ZZ;'S1Z;'S;=`1l<%lO1Z~1oP;=`<%l1ZR1yZ!QP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR2sZzP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR3mZ{P!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR4gZ}P!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR5aZ!RP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR6ZZ!]P!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR7TZ!SP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR7{]!VQOX#rZ]#r^p#rpq$jqs#rt!Q#r!Q![8t![!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR8{cSP!VQOX#rZ]#r^p#rpq$jqs#rt!Q#r!Q![8t![!]#r!^!g#r!g!h:W!h!}#r#O#P#r#Q#R#r#R#S8t#S#X#r#X#Y:W#Y;'S#r;'S;=`%b<%lO#rR:]c!VQOX#rZ]#r^p#rpq$jqs#rt{#r{|;h|}#r}!O;h!O!Q#r!Q![<l![!]#r!^!}#r#O#P#r#Q#R#r#R#S<l#S;'S#r;'S;=`%b<%lO#rR;m_!VQOX#rZ]#r^p#rpq$jqs#rt!Q#r!Q![<l![!]#r!^!}#r#O#P#r#Q#R#r#R#S<l#S;'S#r;'S;=`%b<%lO#rR<s_SP!VQOX#rZ]#r^p#rpq$jqs#rt!Q#r!Q![<l![!]#r!^!}#r#O#P#r#Q#R#r#R#S<l#S;'S#r;'S;=`%b<%lO#rR=y]!OP!VQOX#rZ]#r^p#rpq$jqs#rt!P#r!P!Q>r!Q!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR>yZ!PP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rR?seSP!VQOX#rZ]#r^p#rpq$jqs#rt!O#r!O!P8t!P!Q#r!Q![?l![!]#r!^!g#r!g!h:W!h!}#r#O#P#r#Q#R#r#R#S?l#S#X#r#X#Y:W#Y;'S#r;'S;=`%b<%lO#rRA]^!cP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!_#r!_!`BX!`!aCR!a!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rRB`Z!eP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rRCYZ!bP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rRDSZ!`P!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rRD|]!dP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!_#r!_!`Eu!`!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rRE|Z!fP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rRFvb!VQwPOX#rZ]#r^p#rpq$jqs#rt!Q#r!Q![Fo![!]#r!^!c#r!c!}Fo#O#P#r#Q#R#r#R#SFo#S#T#r#T#oFo#o;'S#r;'S;=`%b<%lO#r~HTP!U~!}#OHW~H]O!Y~RHbP!WP#P#QHeQHjO!ZQRHqZ!lP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#rRIkZ!mP!VQOX#rZ]#r^p#rpq$jqs#rt!]#r!^!}#r#O#P#r#Q;'S#r;'S;=`%b<%lO#r",
  tokenizers: [0, 1],
  topRules: {"Formula":[0,2]},
  specialized: [{term: 39, get: value => spec_identifier[value] || -1}],
  tokenPrec: 0
});

const MagreportLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            styleTags({
                OriginalFieldName: tags.variableName,
                DerivedFieldName: tags.propertyName,
                FunctionName: tags.function(tags.variableName),
                String: tags.string,
                LineComment: tags.lineComment,
                IfKeyword: tags.keyword,
                ElifKeyword: tags.keyword,
                ElseKeyword: tags.keyword,
                CompareOp: tags.compareOperator,
                OrKeyword: tags.logicOperator,
                AndKeyword: tags.logicOperator,
                XorKeyword: tags.logicOperator,
                NotKeyword: tags.logicOperator,
                "( )": tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: { line: "#" }
    }
});
function MagLang() {
    return new LanguageSupport(MagreportLanguage);
}

export { MagLang, MagreportLanguage };
